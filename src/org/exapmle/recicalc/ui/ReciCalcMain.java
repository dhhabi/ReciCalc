/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.exapmle.recicalc.ui;

import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import org.example.recicalc.model.Bill;
import org.example.recicalc.model.Ingredient;
import org.example.recicalc.model.Recipe;
import org.example.recicalc.service.IngredientService;
import org.example.recicalc.utility.Discount;
import org.example.recicalc.utility.Tax;

/**
 * This class represents the User Interface for the application
 * For simplicity I have just added an ArrayList for maintaining the bill
 *
 * @author Preet
 */
public class ReciCalcMain extends javax.swing.JFrame {
    //Bill object to hold bill details 
    private Bill customerBill;
    /*Ingredient service object 
        Should be injected in spring dependency injection 
        I am just initializing it here manually 
    */
    private IngredientService ingredientService;
    private ArrayList<Ingredient> availableIngredients;
    //To maintain the list of ingredients added to a perticular recipe
    private ArrayList<Ingredient> recipeIngedientsList;
    //Used to manage rows of ingredients table
    private DefaultTableModel ingredientTableModel;
    //Used to manage rows of costs table
    private DefaultTableModel costsTableModel;
    //used To prevent multiple dots in quantiy
    private int dotCount = 0;
    // To represent currancy in us dollars
    NumberFormat n = NumberFormat.getCurrencyInstance(Locale.US);
    //To Store the grand Total amount
    BigDecimal grandTotal = BigDecimal.ZERO;
    /**
     * Creates new form ReciCalcMain
     * initialize customer bill
     * initialize UI components 
     */
    public ReciCalcMain() {
        
        initComponents();
        this.customerBill = new Bill();
        this.ingredientService = new IngredientService();
        this.recipeIngedientsList = new ArrayList<>();
        initAvailableIngredients();
        setupCostsTable();
        setupIngredientTable();
        enableIngredientsPanel(false);
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdNewRecipe = new javax.swing.JButton();
        panelSelectIngredients = new javax.swing.JPanel();
        txtIngredientQuantity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableIngredients = new javax.swing.JTable();
        cmdAddIngredient = new javax.swing.JButton();
        cmbIngredient = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        checkOrganic = new javax.swing.JCheckBox();
        lblPriceAndMeasuringUnit = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        recipeTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        cmbRecipe = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblGrandTotal = new javax.swing.JLabel();
        cmdAddRecipe = new javax.swing.JButton();
        cmdClearBill = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ReciCalc");

        cmdNewRecipe.setText("New Recipe");
        cmdNewRecipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewRecipeActionPerformed(evt);
            }
        });

        panelSelectIngredients.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Ingredients"));

        txtIngredientQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIngredientQuantityActionPerformed(evt);
            }
        });
        txtIngredientQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIngredientQuantityKeyTyped(evt);
            }
        });

        jLabel3.setText("Quantity");

        tableIngredients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableIngredients);

        cmdAddIngredient.setText("Add");
        cmdAddIngredient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddIngredientActionPerformed(evt);
            }
        });

        cmbIngredient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbIngredientActionPerformed(evt);
            }
        });

        jLabel2.setText("Ingredient");

        checkOrganic.setText("Organic");

        lblPriceAndMeasuringUnit.setText("*");

        jLabel6.setText("Selected Ingredient Price :");

        javax.swing.GroupLayout panelSelectIngredientsLayout = new javax.swing.GroupLayout(panelSelectIngredients);
        panelSelectIngredients.setLayout(panelSelectIngredientsLayout);
        panelSelectIngredientsLayout.setHorizontalGroup(
            panelSelectIngredientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSelectIngredientsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSelectIngredientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                    .addGroup(panelSelectIngredientsLayout.createSequentialGroup()
                        .addGroup(panelSelectIngredientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelSelectIngredientsLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(124, 124, 124)
                                .addComponent(jLabel3))
                            .addGroup(panelSelectIngredientsLayout.createSequentialGroup()
                                .addComponent(cmbIngredient, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIngredientQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelSelectIngredientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelSelectIngredientsLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblPriceAndMeasuringUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelSelectIngredientsLayout.createSequentialGroup()
                                .addComponent(checkOrganic)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmdAddIngredient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        panelSelectIngredientsLayout.setVerticalGroup(
            panelSelectIngredientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSelectIngredientsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelSelectIngredientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelSelectIngredientsLayout.createSequentialGroup()
                        .addGroup(panelSelectIngredientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(26, 26, 26))
                    .addGroup(panelSelectIngredientsLayout.createSequentialGroup()
                        .addGroup(panelSelectIngredientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPriceAndMeasuringUnit)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelSelectIngredientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIngredientQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmdAddIngredient)
                            .addComponent(checkOrganic)
                            .addComponent(cmbIngredient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        recipeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(recipeTable);

        jLabel4.setText("Costs : ");

        cmbRecipe.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Salad Dressing", "Healthy Chicken Breast", "Pasta Fiesta" }));
        cmbRecipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbRecipeActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Recipe");

        jLabel5.setText("Grand Total :");

        lblGrandTotal.setText("$0.00");

        cmdAddRecipe.setText("Add Recipe");
        cmdAddRecipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddRecipeActionPerformed(evt);
            }
        });

        cmdClearBill.setText("Clear Bill");
        cmdClearBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdClearBillActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSelectIngredients, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbRecipe, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmdNewRecipe, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmdAddRecipe, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblGrandTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(cmdClearBill, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdNewRecipe)
                    .addComponent(jLabel1)
                    .addComponent(cmbRecipe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addComponent(panelSelectIngredients, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdAddRecipe)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lblGrandTotal)
                    .addComponent(cmdClearBill))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbRecipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbRecipeActionPerformed
        cmbRecipe.setEnabled(false);
        enableIngredientsPanel(true);
    }//GEN-LAST:event_cmbRecipeActionPerformed

    private void txtIngredientQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIngredientQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIngredientQuantityActionPerformed

    private void cmdAddIngredientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddIngredientActionPerformed
        int selectedIngredientIndex = cmbIngredient.getSelectedIndex();
        //Select ingredient from combobox
        Ingredient selectedIngredient = availableIngredients.get(selectedIngredientIndex);
        //Make new Ingredient object ot store it to recipe ingredient list
        Ingredient newIngredient = new Ingredient();
        //Set required properties of new Ingredient object 
        newIngredient.setIngredientName(selectedIngredient.getIngredientName());
        newIngredient.setType(selectedIngredient.getType());
        double ingredientQuantity = Double.parseDouble(txtIngredientQuantity.getText());
        newIngredient.setQuantity(ingredientQuantity);
        //Check wether ingredient is organic or not and set accordingly 
        if(checkOrganic.isSelected())
            newIngredient.setOrganic(true);
        //Calculate price based on quantity and update the ingredient price
        BigDecimal ingredientPrice = availableIngredients.get(selectedIngredientIndex).getPrice().multiply(new BigDecimal(txtIngredientQuantity.getText()));
        newIngredient.setPrice(ingredientPrice);
        //add new ingredient object to recipie ingredients list
        recipeIngedientsList.add(newIngredient);
        addRowToIngredientTable(newIngredient);
        //Set dotCount to zero to support validation of quantitiy textbox
        dotCount = 0;
    }//GEN-LAST:event_cmdAddIngredientActionPerformed

    private void cmdNewRecipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewRecipeActionPerformed
        cmbRecipe.setEnabled(true);
        recipeIngedientsList.removeAll(recipeIngedientsList);
        resetIngredientPanel();
    }//GEN-LAST:event_cmdNewRecipeActionPerformed

    /**
     * Check whether input is a number or not 
     * if input is not valid method shows a message
     * @param evt 
     */
    private void txtIngredientQuantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIngredientQuantityKeyTyped
      //In real time it should have a better implementaiton but because of time constraints i am just using this
        int temp = evt.getKeyChar();
        //Check whether typed key is a dot and make sure only one dot present
        if(temp==46)
            dotCount++;
        if(dotCount>1){
            JOptionPane.showMessageDialog(rootPane, "Only one dot allowed !");
            dotCount--;
            evt.consume();
        }
        
        if(!(temp>47&&temp<58||temp==8||temp==46))
        {
            JOptionPane.showMessageDialog(rootPane, "Only numbers allowed");
            evt.consume();
        }
    }//GEN-LAST:event_txtIngredientQuantityKeyTyped

   
    private void cmdClearBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdClearBillActionPerformed
        //Remove entries from the ingredient table
        while (costsTableModel.getRowCount()>0){
            costsTableModel.removeRow(0);
        }
        lblGrandTotal.setText("$0.00");
        clearCustomerBill();
    }//GEN-LAST:event_cmdClearBillActionPerformed

    /*
        Show the price and measuring unit for selected ingredient 
    */
    private void cmbIngredientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbIngredientActionPerformed
        int selectedProductIndex = cmbIngredient.getSelectedIndex();
        lblPriceAndMeasuringUnit.setText(availableIngredients.get(selectedProductIndex).getPrice()+"/"+availableIngredients.get(selectedProductIndex).getMeasuringUnit());
    }//GEN-LAST:event_cmbIngredientActionPerformed

    private void cmdAddRecipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddRecipeActionPerformed
       //Create new recipe object and pass name of recipe in constructor
        Recipe newRecipe = new Recipe((String)cmbRecipe.getSelectedItem());
        newRecipe.setIngredients(recipeIngedientsList);
        addRowToRecipeTable(newRecipe);
    }//GEN-LAST:event_cmdAddRecipeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReciCalcMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReciCalcMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReciCalcMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReciCalcMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReciCalcMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkOrganic;
    private javax.swing.JComboBox cmbIngredient;
    private javax.swing.JComboBox cmbRecipe;
    private javax.swing.JButton cmdAddIngredient;
    private javax.swing.JButton cmdAddRecipe;
    private javax.swing.JButton cmdClearBill;
    private javax.swing.JButton cmdNewRecipe;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblGrandTotal;
    private javax.swing.JLabel lblPriceAndMeasuringUnit;
    private javax.swing.JPanel panelSelectIngredients;
    private javax.swing.JTable recipeTable;
    private javax.swing.JTable tableIngredients;
    private javax.swing.JTextField txtIngredientQuantity;
    // End of variables declaration//GEN-END:variables

    
    
/**
* This method setup the UI for Bill Table 
* @param 
*/
private void setupCostsTable(){
    costsTableModel = new DefaultTableModel();
    TableColumn colmn;
      recipeTable.setModel(costsTableModel);
      costsTableModel.addColumn("Recipe");
      costsTableModel.addColumn("Sales Tax");
      costsTableModel.addColumn("Wellness Discount");
      costsTableModel.addColumn("Total Cost");
      
      colmn = recipeTable.getColumnModel().getColumn(0);
      colmn.setPreferredWidth(150);
}

/**
* This method setup the UI for Ingredient table 
* @param 
*/
private void setupIngredientTable(){
    ingredientTableModel = new DefaultTableModel();
    TableColumn colmn;
      tableIngredients.setModel(ingredientTableModel);
      ingredientTableModel.addColumn("Ingredient");
      ingredientTableModel.addColumn("Type");
      ingredientTableModel.addColumn("isOrganic");
      ingredientTableModel.addColumn("Quantity");
      ingredientTableModel.addColumn("Price");
      
      colmn = tableIngredients.getColumnModel().getColumn(0);
      colmn.setPreferredWidth(150);
}
/**
 * Set up the panel to select and add ingredients to a recipe 
 * @param enabled 
 */
private void enableIngredientsPanel(boolean enabled){
    cmbIngredient.setEnabled(enabled);
    txtIngredientQuantity.setEnabled(enabled);
    cmdAddIngredient.setEnabled(enabled);
    tableIngredients.setEnabled(enabled);
    
}

 /**
     * Clear the bill object 
     * @param 
 */
private void clearCustomerBill(){
   /* 
    For simplicity I am just referencing bill object to null and creating a new object reference 
    */
    grandTotal = null;
    grandTotal = BigDecimal.ZERO;
    customerBill = null;
    customerBill = new Bill();
}
/**
 * Initialize the ingredient ComboBox and fill up all available ingredients
 */
private void initAvailableIngredients(){
    availableIngredients = ingredientService.getAvailableIngredient();
    for(Ingredient i : availableIngredients){
        cmbIngredient.addItem(i.getIngredientName());
    }
}
/**
 * Take ingredient object and add a row to ingredient table 
 * @param ingredient 
 */
private void addRowToIngredientTable(Ingredient ingredient){
    Object[] rowData = {ingredient.getIngredientName(),ingredient.getType(),ingredient.isOrganic(),ingredient.getQuantity(),lblPriceAndMeasuringUnit.getText()};
    ingredientTableModel.addRow(rowData);
}


/**
 * Reset the ingredient table 
 * 
 */
private void resetIngredientPanel(){
    //Remove entries from the ingredient table
    while (ingredientTableModel.getRowCount()>0){
        ingredientTableModel.removeRow(0);
    }
    //reset other fields
    txtIngredientQuantity.setText("");
    checkOrganic.setSelected(false);
}

/**
 * Calculate Sales Tax , Wellness Discount and calculate other costs
 * Add row to to Costs Table and display the results 
 * Update grand total 
 * @param recipe 
 */
private void addRowToRecipeTable(Recipe recipe){
   
    BigDecimal totalPrice = BigDecimal.ZERO;
    
    ArrayList<Ingredient> recipeIngredients = recipe.getIngredients();
        for(Ingredient ingredient: recipeIngredients){
            totalPrice = totalPrice.add(ingredient.getPrice());
            
        }
    
    //Calculate 5% wellness discount to organic ingredients     
    BigDecimal wellnessDiscount = Discount.calculateWellnessDiscount(recipe, "5");
    //Calculate 8.6 % sales tax on total price excluding Produce products 
    BigDecimal salesTax = Tax.calculateSalesTax(recipe, "8.6");
    //Total cost to user after adding sales tax and subtracting wellness discount
    BigDecimal totalCost = totalPrice.add(salesTax).subtract(wellnessDiscount);
    
    Object[] rowData = {recipe.getRecipeName(),n.format(salesTax.doubleValue()),n.format(wellnessDiscount.doubleValue()),n.format(totalCost.doubleValue())};
    costsTableModel.addRow(rowData);
    //Update Grand total lable view
    grandTotal = grandTotal.add(totalCost);
    lblGrandTotal.setText(n.format(grandTotal));
}

}
